// <auto-generated />
using System;
using Librarian.Common.Utils;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Librarian.Common.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240722134451_ProtoV0_4_16")]
    partial class ProtoV0_4_16
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AppAppCategory", b =>
                {
                    b.Property<long>("AppCategoriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppsId")
                        .HasColumnType("bigint");

                    b.HasKey("AppCategoriesId", "AppsId");

                    b.HasIndex("AppsId");

                    b.ToTable("AppAppCategory");
                });

            modelBuilder.Entity("AppCategoryAppInfo", b =>
                {
                    b.Property<long>("AppCategoriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppInfosId")
                        .HasColumnType("bigint");

                    b.HasKey("AppCategoriesId", "AppInfosId");

                    b.HasIndex("AppInfosId");

                    b.ToTable("AppCategoryAppInfo");
                });

            modelBuilder.Entity("DeviceUser", b =>
                {
                    b.Property<long>("DevicesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("DevicesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("DeviceUser");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.Account", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PlatformAccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProfileUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("Platform", "PlatformAccountId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.App", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AppInfoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(4095)
                        .HasColumnType("varchar(4095)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("TotalAppSaveFileCount")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalAppSaveFileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("TotalRunTime")
                        .HasColumnType("time(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppInfoId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsPublic");

                    b.HasIndex("Name");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("Apps");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppBinary", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("AppInfoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PublicUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("SentinelId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Sha256")
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)")
                        .IsFixedLength();

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("TokenServerUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AppInfoId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SentinelId");

                    b.HasIndex("TokenServerUrl");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("AppBinaries");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppBinaryChunk", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AppBinaryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PublicUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Sha256")
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)")
                        .IsFixedLength();

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AppBinaryId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("AppBinaryChunks");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppCategory", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("AppCategories");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppInfo", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("BackgroundImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IconImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsInternal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tinyint(1)")
                        .HasComputedColumnSql("Source = 'internal'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("ParentAppInfoId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(4095)
                        .HasColumnType("varchar(4095)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SourceAppId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Name");

                    b.HasIndex("ParentAppInfoId");

                    b.HasIndex("Type");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("Source", "SourceAppId");

                    b.ToTable("AppInfos");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppInfoDetails", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("AppId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Developer")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Version")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AppId")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("AppInfoDetails");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppInst", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("AppId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("TotalRunTime")
                        .HasColumnType("time(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("AppInsts");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppInstRunTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AppInstId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AppInstId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("AppInstRunTimes");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppSaveFile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("AppId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("FileMetadataId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FileMetadataId");

                    b.HasIndex("IsPinned");

                    b.HasIndex("Status");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("AppSaveFiles");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppSaveFileCapacity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("Count")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("EntityInternalId")
                        .HasColumnType("bigint");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<long?>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("Strategy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("EntityType", "EntityInternalId");

                    b.ToTable("AppSaveFileCapacities");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.Device", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ClientName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClientSourceCodeAddress")
                        .HasMaxLength(4095)
                        .HasColumnType("varchar(4095)");

                    b.Property<string>("ClientVersion")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SystemType")
                        .HasColumnType("int");

                    b.Property<string>("SystemVersion")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeviceName");

                    b.HasIndex("SystemType");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.FeatureFlag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConfigJsonSchema")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4095)
                        .HasColumnType("varchar(4095)");

                    b.Property<string>("IdStr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("RequireContext")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IdStr")
                        .IsUnique();

                    b.HasIndex("UpdatedAt");

                    b.ToTable("FeatureFlags");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.FeatureRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConfigJson")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("longtext");

                    b.Property<long>("ContextId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("FeatureFlagId")
                        .HasColumnType("bigint");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FeatureFlagId");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("FeatureRequests");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.FeedActionSet", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4095)
                        .HasColumnType("varchar(4095)");

                    b.Property<long>("FeedConfigId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FeedConfigId");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("FeedActions");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.FeedConfig", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4095)
                        .HasColumnType("varchar(4095)");

                    b.Property<long>("FeedItemCollectionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HideItems")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastPullMessage")
                        .HasMaxLength(65535)
                        .HasColumnType("longtext");

                    b.Property<int?>("LastPullStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastPullTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan>("PullInterval")
                        .HasColumnType("time(6)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FeedItemCollectionId");

                    b.HasIndex("SourceId");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("FeedConfigs");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.FeedItemCollection", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CategoryStr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4095)
                        .HasColumnType("varchar(4095)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryStr")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("FeedItemCollections");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.FileMetadata", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("Sha256")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)")
                        .IsFixedLength();

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Name");

                    b.HasIndex("SizeBytes");

                    b.HasIndex("Type");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("FileMetadatas");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.Porter", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ContextJsonSchema")
                        .HasMaxLength(65535)
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FeatureSummary")
                        .IsRequired()
                        .HasMaxLength(4095)
                        .HasColumnType("varchar(4095)");

                    b.Property<string>("GlobalName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("PorterContextId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("GlobalName")
                        .IsUnique();

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Porters");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.PorterContext", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ContextJson")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4095)
                        .HasColumnType("varchar(4095)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("PorterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("PorterId")
                        .IsUnique();

                    b.HasIndex("UpdatedAt");

                    b.ToTable("PorterContexts");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.Sentinel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(4095)
                        .HasColumnType("varchar(4095)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("Sentinels");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("InternalId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TokenJti")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ExpiredAt");

                    b.HasIndex("InternalId");

                    b.HasIndex("Status");

                    b.HasIndex("TokenJti");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AppAppSaveFileCapacityCountDefault")
                        .HasColumnType("bigint");

                    b.Property<long?>("AppAppSaveFileCapacitySizeBytesDefault")
                        .HasColumnType("bigint");

                    b.Property<int>("AppAppSaveFileCapacityStrategyDefault")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TotalAppSaveFileCount")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalAppSaveFileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AppAppCategory", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.AppCategory", null)
                        .WithMany()
                        .HasForeignKey("AppCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Librarian.Common.Models.Db.App", null)
                        .WithMany()
                        .HasForeignKey("AppsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppCategoryAppInfo", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.AppCategory", null)
                        .WithMany()
                        .HasForeignKey("AppCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Librarian.Common.Models.Db.AppInfo", null)
                        .WithMany()
                        .HasForeignKey("AppInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceUser", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Librarian.Common.Models.Db.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.Account", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.App", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.AppInfo", "AppInfo")
                        .WithMany("Apps")
                        .HasForeignKey("AppInfoId");

                    b.HasOne("Librarian.Common.Models.Db.User", "User")
                        .WithMany("Apps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppBinary", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.AppInfo", "AppInfo")
                        .WithMany("AppBinaries")
                        .HasForeignKey("AppInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Librarian.Common.Models.Db.Sentinel", "Sentinel")
                        .WithMany("AppBinaries")
                        .HasForeignKey("SentinelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppInfo");

                    b.Navigation("Sentinel");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppBinaryChunk", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.AppBinary", null)
                        .WithMany("AppBinaryChunks")
                        .HasForeignKey("AppBinaryId");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppCategory", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.User", "User")
                        .WithMany("AppCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppInfo", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.Account", "Account")
                        .WithMany("AppInfos")
                        .HasForeignKey("AccountId");

                    b.HasOne("Librarian.Common.Models.Db.AppInfo", "ParentAppInfo")
                        .WithMany("ChildAppInfos")
                        .HasForeignKey("ParentAppInfoId");

                    b.HasOne("Librarian.Common.Models.Db.User", "User")
                        .WithMany("AppInfos")
                        .HasForeignKey("UserId");

                    b.Navigation("Account");

                    b.Navigation("ParentAppInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppInfoDetails", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.AppInfo", "App")
                        .WithOne("AppInfoDetails")
                        .HasForeignKey("Librarian.Common.Models.Db.AppInfoDetails", "AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("App");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppInst", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.App", "App")
                        .WithMany("AppInsts")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Librarian.Common.Models.Db.Device", "Device")
                        .WithMany("AppInsts")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppInstRunTime", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.AppInst", null)
                        .WithMany("AppInstRunTimes")
                        .HasForeignKey("AppInstId");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppSaveFile", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.App", "App")
                        .WithMany("AppSaveFiles")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Librarian.Common.Models.Db.FileMetadata", "FileMetadata")
                        .WithMany()
                        .HasForeignKey("FileMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("FileMetadata");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppSaveFileCapacity", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.User", "User")
                        .WithMany("AppSaveFileCapacities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.FeatureRequest", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.FeatureFlag", "FeatureFlag")
                        .WithMany()
                        .HasForeignKey("FeatureFlagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureFlag");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.FeedActionSet", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.FeedConfig", "FeedConfig")
                        .WithMany("FeedActionSets")
                        .HasForeignKey("FeedConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedConfig");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.FeedConfig", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.FeedItemCollection", "FeedItemCollection")
                        .WithMany("FeedConfigs")
                        .HasForeignKey("FeedItemCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Librarian.Common.Models.Db.FeatureRequest", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedItemCollection");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.PorterContext", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.Porter", "Porter")
                        .WithOne("PorterContext")
                        .HasForeignKey("Librarian.Common.Models.Db.PorterContext", "PorterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Porter");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.Sentinel", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.User", "User")
                        .WithMany("Sentinels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.Session", b =>
                {
                    b.HasOne("Librarian.Common.Models.Db.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Librarian.Common.Models.Db.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.Account", b =>
                {
                    b.Navigation("AppInfos");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.App", b =>
                {
                    b.Navigation("AppInsts");

                    b.Navigation("AppSaveFiles");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppBinary", b =>
                {
                    b.Navigation("AppBinaryChunks");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppInfo", b =>
                {
                    b.Navigation("AppBinaries");

                    b.Navigation("AppInfoDetails");

                    b.Navigation("Apps");

                    b.Navigation("ChildAppInfos");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.AppInst", b =>
                {
                    b.Navigation("AppInstRunTimes");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.Device", b =>
                {
                    b.Navigation("AppInsts");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.FeedConfig", b =>
                {
                    b.Navigation("FeedActionSets");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.FeedItemCollection", b =>
                {
                    b.Navigation("FeedConfigs");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.Porter", b =>
                {
                    b.Navigation("PorterContext");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.Sentinel", b =>
                {
                    b.Navigation("AppBinaries");
                });

            modelBuilder.Entity("Librarian.Common.Models.Db.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("AppCategories");

                    b.Navigation("AppInfos");

                    b.Navigation("AppSaveFileCapacities");

                    b.Navigation("Apps");

                    b.Navigation("Sentinels");
                });
#pragma warning restore 612, 618
        }
    }
}
