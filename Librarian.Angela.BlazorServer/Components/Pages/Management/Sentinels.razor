@page "/management/sentinels"
@using Librarian.Angela.BlazorServer.Services
@using Librarian.Angela.BlazorServer.Services.Models
@using Microsoft.AspNetCore.Authorization
@inject IAngelaService AngelaService
@inject ILogger<Sentinels> Logger
@attribute [Authorize(Policy = "AngelaAccess")]

<PageTitle>Sentinel Management</PageTitle>

<h1>Sentinel Management</h1>

<p>Manage Sentinel instances that provide app binaries and files. Sentinels are created by users and assigned long-lived RefreshTokens.</p>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @successMessage
        <button type="button" class="btn-close" @onclick="@(() => successMessage = null)"></button>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
    </div>
}

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowCreateForm">
        <span class="bi bi-plus-circle"></span> Create New Sentinel
    </button>
</div>

@if (showCreateForm)
{
    <div class="card mb-3">
        <div class="card-header">
            <h5>Create New Sentinel</h5>
        </div>
        <div class="card-body">
            <EditForm Model="@newSentinel" OnValidSubmit="HandleCreateSentinel">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <div class="mb-3">
                    <label for="newUserId" class="form-label">User ID (Owner)</label>
                    <InputNumber id="newUserId" class="form-control" @bind-Value="newSentinel.UserId" />
                    <div class="form-text">The ID of the user who owns this Sentinel</div>
                </div>
                
                <div class="mb-3">
                    <label for="newUrl" class="form-label">URL</label>
                    <InputText id="newUrl" class="form-control" @bind-Value="newSentinel.Url" />
                </div>
                
                <div class="mb-3">
                    <label for="newGetTokenPath" class="form-label">Get Token Path</label>
                    <InputText id="newGetTokenPath" class="form-control" @bind-Value="newSentinel.GetTokenPath" />
                </div>
                
                <div class="mb-3">
                    <label for="newDownloadPath" class="form-label">Download File Path</label>
                    <InputText id="newDownloadPath" class="form-control" @bind-Value="newSentinel.DownloadPath" />
                </div>
                
                <div class="mb-3">
                    <label for="newRefreshToken" class="form-label">Refresh Token</label>
                    <InputText id="newRefreshToken" type="password" class="form-control" @bind-Value="newSentinel.RefreshToken" />
                    <div class="form-text">Long-lived token for Sentinel authentication</div>
                </div>
                
                <div class="mb-3">
                    <label for="newAltUrls" class="form-label">Alternative URLs (comma-separated)</label>
                    <InputText id="newAltUrls" class="form-control" @bind-Value="newSentinel.AltUrlsString" />
                    <div class="form-text">Optional: Enter multiple URLs separated by commas</div>
                </div>
                
                <div>
                    <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Create Sentinel
                    </button>
                    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelCreateForm" disabled="@isProcessing">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (sentinels == null)
{
    <p><em>Loading...</em></p>
}
else if (!sentinels.Any())
{
    <p><em>No sentinels found.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>User ID</th>
                <th>URL</th>
                <th>Get Token Path</th>
                <th>Download Path</th>
                <th>Has Token</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sentinel in sentinels)
            {
                <tr>
                    <td>@sentinel.Id</td>
                    <td>@sentinel.UserId</td>
                    <td>@sentinel.Url</td>
                    <td>@sentinel.GetTokenUrlPath</td>
                    <td>@sentinel.DownloadFileUrlPath</td>
                    <td>@(!string.IsNullOrEmpty(sentinel.RefreshToken) ? "Yes" : "No")</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-1" @onclick="@(() => ShowEditForm(sentinel))" disabled="@isProcessing">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="@(() => ShowDeleteConfirm(sentinel))" disabled="@isProcessing">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (showEditForm && editingSentinel != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Sentinel: @editingSentinel.Id</h5>
                    <button type="button" class="btn-close" @onclick="CancelEditForm" disabled="@isProcessing"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editModel" OnValidSubmit="HandleUpdateSentinel">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="mb-3">
                            <label for="editUserId" class="form-label">User ID</label>
                            <InputNumber id="editUserId" class="form-control" @bind-Value="editModel.UserId" />
                            <div class="form-text">Leave 0 to keep current value (@editingSentinel.UserId)</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="editUrl" class="form-label">URL</label>
                            <InputText id="editUrl" class="form-control" @bind-Value="editModel.Url" />
                            <div class="form-text">Leave empty to keep current value</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="editGetTokenPath" class="form-label">Get Token Path</label>
                            <InputText id="editGetTokenPath" class="form-control" @bind-Value="editModel.GetTokenPath" />
                            <div class="form-text">Leave empty to keep current value</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="editDownloadPath" class="form-label">Download File Path</label>
                            <InputText id="editDownloadPath" class="form-control" @bind-Value="editModel.DownloadPath" />
                            <div class="form-text">Leave empty to keep current value</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="editRefreshToken" class="form-label">Refresh Token</label>
                            <InputText id="editRefreshToken" type="password" class="form-control" @bind-Value="editModel.RefreshToken" />
                            <div class="form-text">Leave empty to keep current token</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="editAltUrls" class="form-label">Alternative URLs (comma-separated)</label>
                            <InputText id="editAltUrls" class="form-control" @bind-Value="editModel.AltUrlsString" />
                            <div class="form-text">Leave empty to keep current URLs</div>
                        </div>
                        
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CancelEditForm" disabled="@isProcessing">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                Save Changes
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteConfirm && deletingSentinel != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete" disabled="@isProcessing"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this Sentinel?</p>
                    <ul>
                        <li><strong>ID:</strong> @deletingSentinel.Id</li>
                        <li><strong>URL:</strong> @deletingSentinel.Url</li>
                        <li><strong>User ID:</strong> @deletingSentinel.UserId</li>
                    </ul>
                    <p class="text-danger">This action cannot be undone!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete" disabled="@isProcessing">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="HandleDeleteSentinel" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<SentinelSummary>? sentinels;
    private string? errorMessage;
    private string? successMessage;
    private bool showCreateForm = false;
    private bool showEditForm = false;
    private bool showDeleteConfirm = false;
    private bool isProcessing = false;
    private SentinelFormModel newSentinel = new();
    private SentinelFormModel editModel = new();
    private SentinelSummary? editingSentinel;
    private SentinelSummary? deletingSentinel;

    protected override async Task OnInitializedAsync()
    {
        await LoadSentinels();
    }

    private async Task LoadSentinels()
    {
        try
        {
            sentinels = await AngelaService.GetSentinelsAsync();
            if (sentinels == null)
            {
                errorMessage = "Failed to load sentinels. Please check if Angela service is running.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading sentinels");
            errorMessage = "An error occurred while loading sentinels.";
        }
    }

    private void ShowCreateForm()
    {
        showCreateForm = true;
        newSentinel = new SentinelFormModel();
        errorMessage = null;
        successMessage = null;
    }

    private void CancelCreateForm()
    {
        showCreateForm = false;
        newSentinel = new SentinelFormModel();
    }

    private async Task HandleCreateSentinel()
    {
        isProcessing = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            var altUrls = string.IsNullOrEmpty(newSentinel.AltUrlsString) 
                ? null 
                : newSentinel.AltUrlsString.Split(',').Select(u => u.Trim()).Where(u => !string.IsNullOrEmpty(u)).ToArray();

            var result = await AngelaService.CreateSentinelAsync(
                newSentinel.UserId,
                newSentinel.Url,
                newSentinel.GetTokenPath,
                newSentinel.DownloadPath,
                newSentinel.RefreshToken,
                altUrls
            );

            if (result)
            {
                successMessage = $"Sentinel created successfully for user {newSentinel.UserId}.";
                showCreateForm = false;
                newSentinel = new SentinelFormModel();
                await LoadSentinels();
            }
            else
            {
                errorMessage = "Failed to create sentinel. Please check the logs for details.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating sentinel");
            errorMessage = "An error occurred while creating the sentinel.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void ShowEditForm(SentinelSummary sentinel)
    {
        editingSentinel = sentinel;
        editModel = new SentinelFormModel
        {
            UserId = 0, // Will be treated as "keep current"
            Url = "",
            GetTokenPath = "",
            DownloadPath = "",
            RefreshToken = "",
            AltUrlsString = ""
        };
        showEditForm = true;
        errorMessage = null;
        successMessage = null;
    }

    private void CancelEditForm()
    {
        showEditForm = false;
        editingSentinel = null;
        editModel = new SentinelFormModel();
    }

    private async Task HandleUpdateSentinel()
    {
        if (editingSentinel == null) return;

        isProcessing = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            string[]? altUrls = null;
            if (!string.IsNullOrEmpty(editModel.AltUrlsString))
            {
                altUrls = editModel.AltUrlsString.Split(',').Select(u => u.Trim()).Where(u => !string.IsNullOrEmpty(u)).ToArray();
            }

            var result = await AngelaService.UpdateSentinelAsync(
                editingSentinel.Id,
                editModel.UserId == 0 ? null : editModel.UserId,
                string.IsNullOrEmpty(editModel.Url) ? null : editModel.Url,
                string.IsNullOrEmpty(editModel.GetTokenPath) ? null : editModel.GetTokenPath,
                string.IsNullOrEmpty(editModel.DownloadPath) ? null : editModel.DownloadPath,
                string.IsNullOrEmpty(editModel.RefreshToken) ? null : editModel.RefreshToken,
                altUrls
            );

            if (result)
            {
                successMessage = $"Sentinel {editingSentinel.Id} updated successfully.";
                showEditForm = false;
                editingSentinel = null;
                editModel = new SentinelFormModel();
                await LoadSentinels();
            }
            else
            {
                errorMessage = "Failed to update sentinel. Please check the logs for details.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating sentinel");
            errorMessage = "An error occurred while updating the sentinel.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void ShowDeleteConfirm(SentinelSummary sentinel)
    {
        deletingSentinel = sentinel;
        showDeleteConfirm = true;
        errorMessage = null;
        successMessage = null;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        deletingSentinel = null;
    }

    private async Task HandleDeleteSentinel()
    {
        if (deletingSentinel == null) return;

        isProcessing = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            var result = await AngelaService.DeleteSentinelAsync(deletingSentinel.Id);

            if (result)
            {
                successMessage = $"Sentinel {deletingSentinel.Id} deleted successfully.";
                showDeleteConfirm = false;
                deletingSentinel = null;
                await LoadSentinels();
            }
            else
            {
                errorMessage = "Failed to delete sentinel. Please check the logs for details.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting sentinel");
            errorMessage = "An error occurred while deleting the sentinel.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    public class SentinelFormModel
    {
        [System.ComponentModel.DataAnnotations.Required]
        public long UserId { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        public string Url { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required]
        public string GetTokenPath { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required]
        public string DownloadPath { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required]
        public string RefreshToken { get; set; } = string.Empty;

        public string AltUrlsString { get; set; } = string.Empty;
    }
}