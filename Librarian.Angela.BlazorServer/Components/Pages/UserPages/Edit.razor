@page "/users/edit"
@using Microsoft.EntityFrameworkCore
@using Librarian.Common.Models.Db
@inject IDbContextFactory<Librarian.Common.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>User</h2>
<hr />
@if (User is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="User" OnValidSubmit="UpdateUser" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="User.Id" value="@User.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="User.Name" class="form-control" />
                    <ValidationMessage For="() => User.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="User.Password" class="form-control" />
                    <ValidationMessage For="() => User.Password" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="type" class="form-label">Type:</label>
                    <InputSelect id="type" @bind-Value="User.Type" class="form-control">
                        @foreach (var v in Enum.GetValues<Common.Constants.Enums.UserType>())
                        {
                            <option value="@v">@v</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => User.Type" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputSelect id="status" @bind-Value="User.Status" class="form-control">
                        @foreach (var v in Enum.GetValues<Common.Constants.Enums.UserStatus>())
                        {
                            <option value="@v">@v</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => User.Status" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="appappsavefilecapacitycountdefault" class="form-label">AppAppSaveFileCapacityCountDefault:</label>
                    <InputNumber id="appappsavefilecapacitycountdefault" @bind-Value="User.AppAppSaveFileCapacityCountDefault" class="form-control" />
                    <ValidationMessage For="() => User.AppAppSaveFileCapacityCountDefault" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="appappsavefilecapacitysizebytesdefault" class="form-label">AppAppSaveFileCapacitySizeBytesDefault:</label>
                    <InputNumber id="appappsavefilecapacitysizebytesdefault" @bind-Value="User.AppAppSaveFileCapacitySizeBytesDefault" class="form-control" />
                    <ValidationMessage For="() => User.AppAppSaveFileCapacitySizeBytesDefault" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="appappsavefilecapacitystrategydefault" class="form-label">AppAppSaveFileCapacityStrategyDefault:</label>
                    <InputSelect id="appappsavefilecapacitystrategydefault" @bind-Value="User.AppAppSaveFileCapacityStrategyDefault" class="form-control">
                        @foreach (var v in Enum.GetValues<Common.Constants.Enums.AppSaveFileCapacityStrategy>())
                        {
                            <option value="@v">@v</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => User.AppAppSaveFileCapacityStrategyDefault" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdat" class="form-label">CreatedAt:</label>
                    <InputDate id="createdat" @bind-Value="User.CreatedAt" class="form-control" />
                    <ValidationMessage For="() => User.CreatedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedat" class="form-label">UpdatedAt:</label>
                    <InputDate id="updatedat" @bind-Value="User.UpdatedAt" class="form-control" />
                    <ValidationMessage For="() => User.UpdatedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="totalappsavefilecount" class="form-label">TotalAppSaveFileCount:</label>
                    <InputNumber id="totalappsavefilecount" @bind-Value="User.TotalAppSaveFileCount" class="form-control" />
                    <ValidationMessage For="() => User.TotalAppSaveFileCount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="totalappsavefilesizebytes" class="form-label">TotalAppSaveFileSizeBytes:</label>
                    <InputNumber id="totalappsavefilesizebytes" @bind-Value="User.TotalAppSaveFileSizeBytes" class="form-control" />
                    <ValidationMessage For="() => User.TotalAppSaveFileSizeBytes" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private long Id { get; set; }

    [SupplyParameterFromForm]
    private User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        User ??= await context.Users.FirstOrDefaultAsync(m => m.Id == Id);

        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateUser()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(User!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(User!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/users");
    }

    private bool UserExists(long id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Users.Any(e => e.Id == id);
    }
}
