@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Librarian.Angela.BlazorServer.Data
@using Librarian.Angela.BlazorServer.Services
@using Librarian.Angela.BlazorServer.Components.Account

@inject ISephirahAuthService AuthService
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject SimpleRedirectManager RedirectManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use Sephirah account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="username" />
                    <label for="username" class="form-label">Username</label>
                    <ValidationMessage For="() => Input.Username" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <!-- Additional links commented out for testing
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
                -->
            </EditForm>
        </section>
    </div>
    <!--
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
    -->
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear any existing authentication cookies
            await HttpContext.SignOutAsync("Cookies");
        }
    }

    public async Task LoginUser()
    {
        try
        {
            var result = await AuthService.LoginAsync(Input.Username, Input.Password);
            
            if (result != null && !string.IsNullOrEmpty(result.AccessToken))
            {
                // Store tokens in HTTP-only cookies
                var cookieOptions = new CookieOptions
                {
                    HttpOnly = true,
                    Secure = true,
                    SameSite = SameSiteMode.Strict,
                    Expires = DateTimeOffset.UtcNow.AddHours(1) // Token expiry
                };

                HttpContext.Response.Cookies.Append("AccessToken", result.AccessToken, cookieOptions);
                HttpContext.Response.Cookies.Append("RefreshToken", result.RefreshToken, cookieOptions);

                // Notify authentication state provider
                if (AuthStateProvider is JwtAuthenticationStateProvider jwtProvider)
                {
                    jwtProvider.NotifyUserAuthentication(result.AccessToken);
                }

                Logger.LogInformation("User logged in successfully.");
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
                Logger.LogWarning("Invalid login attempt for user: {Username}", Input.Username);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login error for user: {Username}", Input.Username);
            errorMessage = "Error: An unexpected error occurred during login.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
